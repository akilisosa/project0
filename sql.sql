CREATE TABLE BANKUSER (
	id number(10) PRIMARY KEY,
	name varchar2(255) NOT NULL check(LENGTH(name)>1),
	password varchar2(255) NOT NULL CHECK(LENGTH(password) > 1),
	balance number(10) NOT NULL
);

CREATE SEQUENCE BANKUSER_seq
    start with 1
    increment by 1;
  
CREATE OR REPLACE TRIGGER BANKUSERS_seq_trigger 
	BEFORE INSERT ON BANKUSER
	FOR EACH ROW
	BEGIN 
   		 SELECT BANKUSER_seq.nextval INTO :NEW.id from dual;
	END;    



CREATE OR REPLACE PROCEDURE create_bankuser(name IN varchar2, password IN varchar2, u_id OUT number)
IS
BEGIN
   INSERT INTO BANKUSER (id, name, PASSWORD, balance) VALUES (BANKUSER_seq.nextval, name, password, 0 );
   u_id := BANKUSER_seq.currval;
END;








CREATE OR REPLACE PROCEDURE find_bankBALANCE(P_ID IN number, P_BALANCE OUT number)
AS
BEGIN
   SELECT BALANCE INTO P_BALANCE FROM BANKUSER WHERE BANKUSER.ID = P_ID; 
   
END;


CREATE OR REPLACE PROCEDURE create_banktrans(P_ID IN number, P_AMOUNT IN number, P_TID OUT number)
AS
BEGIN
   INSERT INTO BANKTRANSACTIONS (TID, AMOUNT, U_ID) VALUES (BANKACTION_seq.nextval, P_AMOUNT, P_ID);
   P_TID := 5;
END;

CREATE OR REPLACE PROCEDURE update_BALANCE(P_ID IN NUMBER, P_SETBALANCE IN NUMBER, P_GETBALANCE OUT NUMBER)
AS 
BEGIN
	UPDATE BANKUSER SET balance = P_SETBALANCE WHERE ID = P_ID;
	P_GETBALANCE := P_SETBALANCE; m
END;


CREATE OR REPLACE PROCEDURE update_BALANCE(P_ID IN number, P_BALANCE IN number)
AS
BEGIN
   SELECT BALANCE INTO P_BALANCE FROM BANKUSER WHERE BANKUSER.ID = P_ID; 
   
END;




CREATE PROCEDURE GET_SINGLE_CUSTOMERINFO
(	
   P_OCCUPATION OUT VARCHAR2,
   P_LASTSTATEMENTBALANCE OUT FLOAT
)
AS
BEGIN
   SELECT AGE, OCCUPATION, LASTSTATEMENTBALANCE INTO P_AGE, P_OCCUPATION, 
          P_LASTSTATEMENTBALANCE 
   FROM CROSSSELLCUSTOMERS 
   WHERE CROSSSELLCUSTOMERS.ID = P_ID;
END;
/




CREATE TABLE BankTransactions (
	tid NUMBER(10) PRIMARY KEY,
	amount NUMBER(10) NOT NULL,
	u_id number(10),
	CONSTRAINT BANKTRANSACTIONS_BANKUSER FOREIGN KEY (u_id) 
        REFERENCES BANKUSER (id) ON DELETE CASCADE
);



   CREATE SEQUENCE BANKACTION_seq
    start with 1
    increment by 1;
   
   CREATE OR REPLACE TRIGGER BANKACTION_seq_trigger 
BEFORE INSERT ON BANKTRANSACTIONS
FOR EACH ROW
BEGIN 
    SELECT BANKACTION_seq.nextval INTO :NEW.tid from dual;
END;    
   

CREATE OR REPLACE PROCEDURE create_bankaction(U_ID IN NUMBER, AMOUNT IN NUMBER, balance OUT number)
IS
--DECLARE @test AS NUMBER;
BEGIN
	--oldAMOUNT := 10;
   	INSERT INTO BANKTRANSACTIONS(tid, AMOUNT, U_ID) VALUES(BANKACTION_seq.nextval,5, 29);
	UPDATE BANKUSER SET BALANCE = 200 WHERE ID = U_ID;
	--SELECT balance INTO test FROM BANKUSER WHERE ID = U_ID;
   balance=200;
   
END;


CREATE OR REPLACE PROCEDURE create_bankaction(U_ID IN NUMBER, @AMOUNT IN NUMBER, balance OUT number)
IS
DECLARE

	newAMOUNT number;
	oldAMOUNT number;
	
	
		SET newAMOUNT = oldAMOUNT + @AMOUNT;
	BEGIN	
		SELECT AMOUNT INTO oldAMOUNT FROM BANKUSER WHERE ID = U_ID;
	
		IF newAMOUNT > 0 THEN
   				INSERT INTO BANKTRANSACTIONS (tid, AMOUNT, U_ID) VALUES (BANKACTION_seq.nextval, @AMOUNT, U_ID);
   				UPDATE BANKUSER SET BALANCE = newAMOUNT WHERE ID = U_ID;
   				balance := newAMOUNT;
		END IF
	
END;












CREATE OR REPLACE PROCEDURE create_bankaction(U_ID IN number, AMOUNT IN number, balance OUT number)
IS

BEGIN

   	INSERT INTO BANKTRANSACTIONS(tid, AMOUNT, U_ID) VALUES(BANKACTION_seq.nextval,5, 29);
   balance:=3;
   
END;


CREATE OR REPLACE PROCEDURE create_bankaction(ID IN NUMBER, AMOUNT IN NUMBER, balance OUT number)
IS
DECLARE
	newAMOUNT number(10);
	oldAMOUNT number(10);
BEGIN
oldAMOUNT = SELECT AMOUNT FROM BANKUSER WHERE ID = ID;
newAMOUNT = oldAMOUNT + AMOUNT;
IF newAMOUNT > 0 THEN
   		INSERT INTO BANKTRANSACTIONS (tid, AMOUNT, U_ID) VALUES (BANKACTION_seq.nextval, AMOUNT, ID);
   			UPDATE BANKUSER SET BALANCE = newAMOUNT WHERE ID = ID;
   		balance := newAMOUNT;
END IF
END;


CREATE OR REPLACE PROCEDURE create_transaction(u_ID IN NUMBER, u_AMOUNT IN varchar2, balance OUT number)
AS maketransactionfomaccount;
BEGIN 
	
BEGIN
	
	oldAMOUNT = SELECT AMOUNT FROM BANKUSER WHERE ID = u_ID;
	newAMOUNT = oldAMOUNT + u_AMOUNT;
	IF newAMOUNT > 0 THEN
		UPDATE BANKUSER SET BALANCE = newAMOUNT WHERE ID = u_ID;
   		INSERT INTO BANKTRANSACTIONS (tid, AMOUNT, U_ID) VALUES (BANKACTION_seq.nextval, u_AMOUNT, u_ID);
   		balance := newAMOUNT;
  	END IF
END;



DECLARE
    id number(10);
BEGIN
    create_puppy('qu', 5, 1, id);
END;


SELECT animal.NAME AS animal, pet.NAME AS pet FROM ANIMAL JOIN pet ON pet.ANIMAL_ID = animal.ID WHERE Animal.NAME = 'Aligator';

SELECT name FROM pet UNION SELECT name FROM animal;